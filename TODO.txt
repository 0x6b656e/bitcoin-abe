* Support new script types.  Fix the firstbits table on upgrade.

* Write a test suite.  Include reorgs and upgrades.

* Highlight any objects that are not in a main chain as such.  In
  particular, don't imply that an output was "redeemed" when the
  redeeming transaction is not in the chain.

* Search by firstbits.

* Show firstbits on address history page.

* Consider adjusting statistics for duplicate coinbase transactions.

* Avoid duplicate in/out points on block pages by using DISTINCT or
  equivalent.  This affects blocks common to more than one chain.

* Consider fixing: /block/HASH returns "Block not found" for block not
  in any chain.

* Defunct abe.fcgi processes not letting abe.py exit.  Unseen in a while.

* Bitcoin 140176 failed to catch up: str(exception) == "1".  Should
  probably limit the kinds of exceptions that catch_up converts to
  warnings.

* Test for a portable "begin transaction" and use it.

* Consider retesting SQL flavour every time on startup.

* Add search by date/time within chain.

* Show auxiliary proof-of-work data.

* Consider porting to libbitcoin.

* Use explicit constraint names.

* Speed up initial load by disabling unneeded constraints temporarily.

* Consider showing amount of time ago along with or instead of
  absolute times.

* Perhaps rewrite adopt_orphans iteratively to avoid Python's
  recursion limit.

* Separate HTML from data access.

* Consider denormalization for performance: prevout_hash in txin,
  pubkey_hash in txout, etc.

* Support PostgreSQL BYTEA and similar binary types for improved space
  use and memory footprint.

* Factor the coin-days destroyed feature as an optional add-on.

* Slight variation in CoinDD et al. among sites indicates a bug.
  Possibly fixed and due to corrupt data.

* Clean up and document limits on search result size.

* Admin interface to reset blkfile_offset, delete chains, etc.

* Add a tool to upload transactions if bitcoind supports it.

* Perhaps write a validation module to check db data.  Begun as verify.py.

* Abstract SQL into the DataStore class.

* Report block size, raw blocks, average transactions per block, fees
  per block, ...

* Report the Merkle branch of a particular transaction to support SPV.

* Test as multithreaded or forking server.

* Perhaps support searching by hash/address non-initial substring.

* /q functions:
  getdifficulty       latesthash          hextarget
  decimaltarget       probability         hashestowin
  nextretarget        estimate
  avgtxsize           avgtxvalue          avgblocksize
  interval            eta                 avgtxnumber
  addressbalance      addressfirstseen    mytransactions
  reorglog

* BTC-specific /q functions:
  bcperblock          changeparams
  totalbc(future block numbers)

* Perhaps create a BlockExplorer.com compatibility mode.

* Perhaps show nethash interval statistics on the chain summary page.

* Perhaps create an "SQL script" DataStore subclass that outputs flat
  SQL INSERTs.

* Perhaps compress scriptPubKey by representing as a pubkey_id and
  address type.

* Context-sensitive help as on http://blockexplorer.com.

* Simplify the process of adding new chains.

* Present Namecoin name operations as an optional add-on.

* Extract info from MultiCoin config files.

* Import transactions from the pool.

* Perhaps add coin tracking features: allow the administrator to
  specify "interesting" (e.g., suspected fraudulent) transactions and
  addresses, then add a hyperlink from objects linked to them.

* Perhaps track and report coin difficulty as proposed by casascius:
  http://forum.bitcoin.org/index.php?topic=10755.0

* Perhaps track and report collectible transaction bytes: size of
  transactions whose outputs are all spent, minus Merkle shrubbery
  needed to verify the rest.

* Perhaps support email notification about address activity.
