* Separate view from controller.

* Optionally add a link to each page allowing the user to download the
  source code and supporting files as a tarfile created on the fly to
  satisfy the AGPL.

* Create "short links" as on http://blockexplorer.com.

* Add a tool to upload transactions if bitcoind supports it.

* Start a test suite.

* Use explicit constraint names.

* Test on Oracle.

* Speed up queries using denormalization and perhaps materialized
  views, where available.

* Test on MySQL.

* Use SEQUENCEs where available for synthetic identifiers.

* Write a validation module to check db data.

* Provide a fast load mode with constraints disabled.

* Test on Apache/FastCGI.

* Abstract inline SQL into the DataStore class.

* Modularise further.

* Highlight any objects that are not in the main chain as such.

* Store and report block size, address type, raw objects, etc.

* Compute Merkle trees and verify transaction Merkle roots.

* Report the Merkle branch of a particular transaction to support SPV.

* Perhaps support searching by hash/address substring.

* Tools/API like http://blockexplorer.com/q.

* Perhaps create a BlockExplorer.com compatibility mode.

* Perhaps create an "SQL script" DataStore subclass that outputs flat
  SQL INSERTs.

* Perhaps provide a postgresql-bytea binary type.

* Perhaps compress scriptPubKey by representing as a pubkey_id and
  address type.

* Context-sensitive help as on http://blockexplorer.com.

* Simplify the process of adding new chains.

* Defend against corrupt or differently formatted block files, though
  yet unseen.

* Present Namecoin name operations.

* Import transactions from the pool.

* Perhaps add coin tracking features: allow the administrator to
  specify "interesting" transactions and addresses, then add a
  hyperlink from objects linked to them.

* Perhaps track and report coin difficulty as proposed by casascius:
  http://forum.bitcoin.org/index.php?topic=10755.0

* Perhaps track and report collectible transaction bytes: size of
  transactions whose outputs are all spent, minus Merkle shrubbery
  needed to verify the rest.
